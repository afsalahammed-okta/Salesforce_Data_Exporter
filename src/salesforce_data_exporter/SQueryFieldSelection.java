/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package salesforce_data_exporter;

import static salesforce_data_exporter.Main.mapObjectField;
import com.sforce.ws.ConnectionException;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import com.opencsv.CSVReader;
import java.awt.Rectangle;
import java.io.FileNotFoundException;

/**
 *
 * @author Afzy
 */
public class SQueryFieldSelection extends javax.swing.JFrame {

    /**
     * Creates new form SQueryFieldSelection
     */
    
    public static Set<String> setInputField = new HashSet<String>();
    public static List<String[]> inputFileData;
    private ArrayList<sObjectFields> list;
    
    public static String sQueryFieldName;
    public static String sQueryFieldSelected;
    public static SQueryResultFields queryResultFields;
    
    private final String matchingFieldError = "Select matching condition";
    private final String fieldError = "Select file";
    private final String multipleFieldSelectionError="Select only one matching condition";
    private final String inputFileEmpty="Please check input file has data for query in Salesforce";
    private final String sQueryResultScreenTitle="Export";
    private final String sCSV="csv";
    private final String sCSVFile="CSV File";
    private final String sChooserTitle="Select file";
    private final String sDot=".";
    private final String sInputFileEmpty="Selected file is empty";
    private String sColumnValue = "";
    private int columPostn = 0;
     
    public SQueryFieldSelection() {
        initComponents();

        loadJFieldTable();
        this.lMatching.setText(this.lMatching.getText()+salesforce_data_exporter.SObjectSelection.sObjectName);
         this.bNext.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tObjectQueryField = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        bBack = new javax.swing.JButton();
        bNext = new javax.swing.JButton();
        bCancel = new javax.swing.JButton();
        lInputFile = new javax.swing.JLabel();
        tFilePath = new javax.swing.JTextField();
        bFileBrowser = new javax.swing.JButton();
        lMatching = new javax.swing.JLabel();
        lMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tObjectQueryField.setAutoCreateRowSorter(true);
        tObjectQueryField.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "API  Name", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tObjectQueryField.setColumnSelectionAllowed(true);
        tObjectQueryField.setShowGrid(true);
        tObjectQueryField.setShowHorizontalLines(false);
        tObjectQueryField.getTableHeader().setReorderingAllowed(false);
        tObjectQueryField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tObjectQueryFieldMouseClicked(evt);
            }
        });
        tObjectQueryField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tObjectQueryFieldKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tObjectQueryField);
        tObjectQueryField.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Step 2: Select data filter file and where condition.");

        bBack.setText("Back");
        bBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBackActionPerformed(evt);
            }
        });

        bNext.setText("Next");
        bNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNextActionPerformed(evt);
            }
        });

        bCancel.setText("Cancel");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        lInputFile.setText("Choose Filter File:");

        tFilePath.setEnabled(false);
        tFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tFilePathActionPerformed(evt);
            }
        });

        bFileBrowser.setText("File Browser");
        bFileBrowser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bFileBrowserMouseClicked(evt);
            }
        });
        bFileBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFileBrowserActionPerformed(evt);
            }
        });

        lMatching.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lMatching.setText("Select the field for matching on ");

        lMessage.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lMatching)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bBack)
                                .addGap(18, 18, 18)
                                .addComponent(bNext)
                                .addGap(18, 18, 18)
                                .addComponent(bCancel))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lInputFile)
                                .addGap(28, 28, 28)
                                .addComponent(tFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bFileBrowser))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bFileBrowser))
                    .addComponent(lInputFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lMatching)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bBack)
                    .addComponent(bNext)
                    .addComponent(bCancel))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBackActionPerformed
        // TODO add your handling code here:
        SObjectSelection.sField.setVisible(false);
        Login.sObj.setVisible(true);
        
    }//GEN-LAST:event_bBackActionPerformed

    private void bNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNextActionPerformed
        // TODO add your handling code here:
        this.bNext.setEnabled(false);
            
        if (-1 == tObjectQueryField.getSelectedRow()) {
            this.lMessage.setText(matchingFieldError); //JOptionPane.showMessageDialog(null, "Select matching condition");
        } else if (this.tFilePath.getText().isEmpty()) {
            this.lMessage.setText(fieldError);
        } else if (tObjectQueryField.getSelectedRowCount() > 1) {
            this.lMessage.setText(multipleFieldSelectionError); //JOptionPane.showMessageDialog(null, "Multiple field selection is not allowed");
        } 
        else if(setInputField.size()==0){
            this.lMessage.setText(inputFileEmpty);// JOptionPane.showMessageDialog(null, "Please check input file has data for query in Salesforce");
        }
        else {
            DefaultTableModel model = (DefaultTableModel) tObjectQueryField.getModel();
            sQueryFieldName = tObjectQueryField.getValueAt(tObjectQueryField.getSelectedRow(), 0).toString();

            System.out.println("Selected Query Field Name:" + sQueryFieldName);
            //setInputField.add(sQueryFieldName);
            SObjectSelection.sField.setVisible(false);
            queryResultFields = new SQueryResultFields();
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
            queryResultFields.setLocation(dim.width / 2 - queryResultFields.getSize().width / 2, dim.height / 2 - queryResultFields.getSize().height / 2);
            queryResultFields.setTitle(sQueryResultScreenTitle);
            queryResultFields.setVisible(true);
            
        }
        this.bNext.setEnabled(true);
    }//GEN-LAST:event_bNextActionPerformed

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Main.logout();
        } catch (ConnectionException ex) {
            lMessage.setText(Main.connectionError);
        }
        System.exit(0);
    }//GEN-LAST:event_bCancelActionPerformed

    private void tObjectQueryFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tObjectQueryFieldMouseClicked
        // TODO add your handling code here:

        sQueryFieldSelected = tObjectQueryField.getValueAt(tObjectQueryField.getSelectedRow(), 0).toString();
        columPostn = tObjectQueryField.getSelectedColumn();
    }//GEN-LAST:event_tObjectQueryFieldMouseClicked

    private void tFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tFilePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tFilePathActionPerformed
    File file;
    private void bFileBrowserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bFileBrowserMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_bFileBrowserMouseClicked

    private void bFileBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFileBrowserActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        if (this.tFilePath.getText().isEmpty()) {
            fc.setCurrentDirectory(new java.io.File(sDot));
        } else {
            fc.setCurrentDirectory(new java.io.File(file.toPath().toString()));
        }

        fc.setDialogTitle(sChooserTitle);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filter = new FileNameExtensionFilter(sCSVFile, sCSV);
        fc.addChoosableFileFilter(filter);
        fc.setAcceptAllFileFilterUsed(false);

        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {

            System.out.println("getSelectedFile() : " + fc.getSelectedFile());
            this.tFilePath.setText(fc.getSelectedFile().toString());
            //ConnectSalesforce.csvFile = this.lInputFile.getText()+ "/export.csv";

            System.out.println("ConnectSalesforce.csvFile " + QuerySalesforce.csvFile);

            file = fc.getSelectedFile();
            System.out.println("fc.getCurrentDirectory()" + fc.getCurrentDirectory());

            try {
                CSVReader reader = new CSVReader(new FileReader(fc.getSelectedFile()), '\t', '\'', 1);
                if (inputFileData != null) {
                    inputFileData.clear();
                }

                inputFileData = reader.readAll();
                
            } catch (FileNotFoundException ex1) {
                lMessage.setText(ex1.getMessage());
            } catch (IOException ex) {
                lMessage.setText(ex.getMessage());
            }
            if(!setInputField.isEmpty())
                setInputField.clear();
            for (String[] s : inputFileData) {
                //System.out.println("String: "+s[0].toString());
                setInputField.add(s[0].toString());
            }
            if(setInputField.isEmpty())
            {
                lMessage.setText(sInputFileEmpty);
            }
            else
                this.bNext.setEnabled(true);
            
            System.out.println(setInputField);
        }
    }//GEN-LAST:event_bFileBrowserActionPerformed

    private void tObjectQueryFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tObjectQueryFieldKeyReleased
        // TODO add your handling code here:
        System.out.println(String.valueOf(evt.getKeyChar()));
        String sUserTypeChar = String.valueOf(evt.getKeyChar());
        DefaultTableModel model = (DefaultTableModel) tObjectQueryField.getModel();
        
        int selectedRow = -1;//before start
        int startRow = selectedRow;
        if (selectedRow == model.getRowCount() - 1) {
            startRow = -1;//Go before start
        }
        
        int newRowNo = salesforce_data_exporter.SearchJtable.searchJTab(tObjectQueryField,String.valueOf(evt.getKeyChar()),tObjectQueryField.getSelectedRow(),tObjectQueryField.getSelectedColumn());
        
        tObjectQueryField.setRowSelectionInterval(newRowNo, newRowNo);
        tObjectQueryField.scrollRectToVisible(new Rectangle(tObjectQueryField.getCellRect(newRowNo, newRowNo, true)));
            
       
    }//GEN-LAST:event_tObjectQueryFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SQueryFieldSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SQueryFieldSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SQueryFieldSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SQueryFieldSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SQueryFieldSelection().setVisible(true);
            }
        });
    }

    public void loadJFieldTable() {

        DefaultTableModel model = (DefaultTableModel) tObjectQueryField.getModel();
        ArrayList<SQueryFieldSelection.sObjectFields> list = LisSObjectFields();

        Object rowData[] = new Object[2];
        for (int i = 0; i < list.size(); i++) {
            if (mapObjectField.containsKey(list.get(i).sFieldAPIName)) {
                System.out.println("Inside for :" + list.get(i).sFieldAPIName);
                rowData[0] = list.get(i).sFieldAPIName;
                rowData[1] = list.get(i).sFieldName;
                model.addRow(rowData);

            }
        }

    }

    public class sObjectFields {

        public String sFieldName;
        public String sFieldAPIName;

        public sObjectFields(String OName, String APIName) {
            this.sFieldName = OName;
            this.sFieldAPIName = APIName;
        }
    }

    public ArrayList LisSObjectFields() {
        list = new ArrayList<sObjectFields>();
        for (int i = 0; i < Main.listSObjectField.size(); i++) {
            sObjectFields sObInst = new sObjectFields(Main.mapSField.get(Main.listSObjectField.get(i)), Main.listSObjectField.get(i));
            list.add(sObInst);
        }
        return list;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBack;
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bFileBrowser;
    private javax.swing.JButton bNext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lInputFile;
    private javax.swing.JLabel lMatching;
    private javax.swing.JLabel lMessage;
    private javax.swing.JTextField tFilePath;
    private javax.swing.JTable tObjectQueryField;
    // End of variables declaration//GEN-END:variables
}
