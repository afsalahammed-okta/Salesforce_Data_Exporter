/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package salesforce_data_exporter;

import com.sforce.soap.partner.QueryResult;
import com.sforce.ws.ConnectionException;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.io.IOException;
import static salesforce_data_exporter.SQueryFieldSelection.setInputField;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import static salesforce_data_exporter.QuerySalesforce.writer;

/**
 *
 * @author Afzy
 */
public class SQueryResultFields extends javax.swing.JFrame {

    /**
     * Creates new form SQueryResultFields
     */
    public static FileExportComplete exportComplete;
    public static Set<String> setfiltFieldvalue = new HashSet<String>();
    private final String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm").format(new Date());
    public static String sFilePath;
    private int columPostn = 0;
    public static int iBatchSize = 0;
    private int iBatchExecuted = 0;
    public static int iProgress = 0;
    public final int iZero = 0;
    public static int iTotalNumberofRecordExported = 0;
    static SQueryResultFields progressBar = null;
    public static List<String> listFieldSelected = new ArrayList<String>();
    public static List<String> listFailed ;
    private int iNumberofBatch;
    float progress;
    private String sSelecteFilePath;
    private DefaultTableModel model;
    private int iSuccessResponse;
    private final String sFieldSelectError;
    private final String sOutputFilePathError;
    private final String sBatchSizeError;
    private final String sBatchSizeExceedError;
    private final String sValidBatchSizeError;
    private final String sValidBatchNumberError;
    private JFileChooser fc ;
    private List<String> listError;
    private final String sTimeStamp;
    private String sFieldName1;
    private String sFieldAPIName;
    private boolean add;
    private static List<String> lstIds;
    private String query = "SELECT ";
    private String strIds = "";
    private String sFieldName = "";
    private Iterator<String> iterator;
    private String setVal = "";
    private int sSize;
    private Iterator<String> iterator1;
    
    public SQueryResultFields() {
        this.sOutputFilePathError = "Select Output File Path";
        this.sFieldSelectError="Please select Field first";
        this.sBatchSizeError="Select batch size";
        this.sBatchSizeExceedError="Select size should not exceed 500 limit";
        this.sValidBatchSizeError="Enter valid batch size";
        this.sValidBatchNumberError="Please enter numeric value in Batch Size";
        this.iSuccessResponse=200;
        this.sSelecteFilePath = "";
        this.sTimeStamp = timeStamp;
        initComponents();
        this.lMessage.setForeground(Color.red);
        this.tBatchSize.setText("200");
        this.bNext.setEnabled(false);
        loadtQueryResultFields();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tQueryResultFields = new javax.swing.JTable();
        bBack = new javax.swing.JButton();
        bNext = new javax.swing.JButton();
        bExit = new javax.swing.JButton();
        lFileDirectory = new java.awt.Label();
        bFileBrowser = new java.awt.Button();
        tFilePath = new javax.swing.JTextField();
        exportProgress = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tBatchSize = new javax.swing.JTextField();
        lMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel1.setText("Select fields from below list:");

        tQueryResultFields.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "API Name", "Field Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tQueryResultFields.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tQueryResultFields.setShowGrid(true);
        tQueryResultFields.setShowHorizontalLines(false);
        tQueryResultFields.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tQueryResultFieldsMouseClicked(evt);
            }
        });
        tQueryResultFields.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tQueryResultFieldsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tQueryResultFieldsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tQueryResultFields);
        tQueryResultFields.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        bBack.setText("Back");
        bBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBackActionPerformed(evt);
            }
        });

        bNext.setText("Next");
        bNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNextActionPerformed(evt);
            }
        });

        bExit.setText("Cancel");
        bExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExitActionPerformed(evt);
            }
        });

        lFileDirectory.setText("Output file path:");

        bFileBrowser.setActionCommand("fileBrowse");
        bFileBrowser.setLabel("Browse...");
        bFileBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFileBrowserActionPerformed(evt);
            }
        });

        exportProgress.setEnabled(false);
        exportProgress.setStringPainted(true);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setText("Step 3: Select query fields and target path for extraction:");

        jLabel3.setText("Batch Size:");

        lMessage.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(bBack)
                            .addGap(18, 18, 18)
                            .addComponent(bNext)
                            .addGap(18, 18, 18)
                            .addComponent(bExit))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lFileDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3))
                            .addGap(22, 22, 22)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                    .addComponent(bFileBrowser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(exportProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tBatchSize, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(lMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bFileBrowser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lFileDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tBatchSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bBack)
                    .addComponent(bNext)
                    .addComponent(bExit))
                .addGap(24, 24, 24))
        );

        lFileDirectory.getAccessibleContext().setAccessibleName("Export File Path:");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExitActionPerformed
        try {
            // TODO add your handling code here:
            Main.logout();
        } catch (ConnectionException ex) {
            lMessage.setText(Main.connectionError);
        }
        System.exit(0);
    }//GEN-LAST:event_bExitActionPerformed

    private void bBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBackActionPerformed
        // TODO add your handling code here:
        SQueryFieldSelection.queryResultFields.setVisible(false);
        SObjectSelection.sField.setVisible(true);
    }//GEN-LAST:event_bBackActionPerformed

    private void bNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNextActionPerformed
        // TODO add your handling code here:
        lMessage.setText("");
        this.tBatchSize.setEnabled(false);
        this.tFilePath.setEnabled(false);
        
        System.out.println("Inside Next button Action");
        listFieldSelected.clear();

        if (-1 == tQueryResultFields.getSelectedRow()) {
            System.out.println("Inside Row Count -1");
            lMessage.setText(sFieldSelectError);

        } else if (this.tFilePath.getText().isEmpty()) {
            lMessage.setText(sOutputFilePathError); //JOptionPane.showMessageDialog(null, "Select Output File Path");

        } else if (this.tBatchSize.getText().isEmpty()){
               lMessage.setText(sBatchSizeError); // JOptionPane.showMessageDialog(null, "Enter batch size");
        }
        else {
            
            try {
                    iBatchSize = Integer.parseInt(tBatchSize.getText());
                    if (iBatchSize > 500) 
                    {
                        lMessage.setText(sBatchSizeExceedError);
                        return;
                    } //JOptionPane.showMessageDialog(null, "Batch size should not exceed 500");
                    
                    else if (Integer.parseInt(this.tBatchSize.getText()) <=0 )
                    {
                        lMessage.setText(sValidBatchSizeError);
                        return;
                    }
                }catch (NumberFormatException e) {
                    lMessage.setText(sValidBatchNumberError);
                } 
            if (!QuerySalesforce.csvFile.equals(this.tFilePath.getText())) 
            {
                QuerySalesforce.csvFile = this.tFilePath.getText();
            }
            if(this.lMessage.getText().isEmpty())
            {
                QuerySalesforce.strings.clear();
                System.out.println("Inside Else part of Row Count -1");
                model = (DefaultTableModel) tQueryResultFields.getModel();
                int[] selectedRows = tQueryResultFields.getSelectedRows();
                System.out.println("selectedRows:" + selectedRows);
                System.out.println("selectedRows Length:" + selectedRows.length);
                ArrayList<Object[]> tasks = new ArrayList<Object[]>();
                Object[] taskAsArray = new Object[tQueryResultFields.getColumnCount()];

                String sFieldName1;
                String sFieldAPIName;
                boolean add;

                for (int i : selectedRows) {
                    sFieldName1 = tQueryResultFields.getValueAt(i, 1).toString();
                    sFieldAPIName = tQueryResultFields.getValueAt(i, 0).toString();
                    System.out.println("sFieldAPIName:" + sFieldAPIName);
                    add = listFieldSelected.add(sFieldAPIName);
                }
                System.out.println("listFieldSelected" + listFieldSelected);
                if (SObjectSelection.sObjectName.isEmpty()) {
                    SObjectSelection.sObjectName = "Account";
                }

                try {

                    this.bNext.setEnabled(false);
                    this.bFileBrowser.setEnabled(false);
                    this.exportProgress.setEnabled(true);
                    this.bBack.setEnabled(false);
                    Iterator<String> iterator1 = setInputField.iterator();
                    String val = "";
                    System.out.println("before going inside Iteration Query");
                    //int limit =0;
                    sFilePath = this.tFilePath.getText();
                    writer = new FileWriter(this.tFilePath.getText());
                    for (int j = 0; j < SQueryResultFields.listFieldSelected.size(); j++) {
                        QuerySalesforce.strings.add(SQueryResultFields.listFieldSelected.get(j));
                    }
                    CSVUtils.writeLine(writer, QuerySalesforce.strings, ',');
                    writer.flush();
                    int inumberOfInputRecords = setInputField.size();
                    listFailed = new ArrayList<String>();
                    //listFailed.add(SQueryFieldSelection.sQueryFieldName);

                    System.out.println("inumberOfInputRecords:" + inumberOfInputRecords);

                    if(inumberOfInputRecords>iBatchSize)
                     iNumberofBatch = inumberOfInputRecords / iBatchSize;
                    else
                        iNumberofBatch=1;
                    System.out.println("iNumberofBatch:" + iNumberofBatch);
                    Double iperBatchval = Double.valueOf(Math.floorDiv(1, iNumberofBatch));

                    System.out.println("iBatchExecuted:" + iBatchExecuted);
                    System.out.println("iperBatchval:" + iperBatchval);
                    QuerySalesforce.strings.clear();
                    QuerySalesforce.iNumberofRecordExported = 0;
                    this.iTotalNumberofRecordExported = 0;
                    ExportProgress ep = new ExportProgress();
                    SwingWorker<Integer, Integer> work;

                    new SwingWorker<Boolean, Integer>() {
                        @Override
                        protected Boolean doInBackground() throws Exception {
                            int limit = 0;
                            while (iterator1.hasNext()) {

                                limit += 1;
                                //System.out.println("Inside Iteration Query:"+limit);
                                setfiltFieldvalue.add(iterator1.next());
                                if (setfiltFieldvalue.size() == iBatchSize || !iterator1.hasNext()) {
                                    QuerySalesforce.iNumberofRecordExported = 0;
                                    query();
                                    iBatchExecuted += 1;
                                    progress = (float) (iBatchExecuted * 100 / iNumberofBatch);
                                    iProgress = (int) progress;
                                    publish(iProgress);
                                    

                                    iTotalNumberofRecordExported = iTotalNumberofRecordExported + QuerySalesforce.iNumberofRecordExported;
                                    System.out.println("QueryResultField:"+iTotalNumberofRecordExported);

                                    Thread.sleep(100);
                                    System.out.println("QuerySalesforce.returnCode:"+QuerySalesforce.returnCode);
                                    if(200 != QuerySalesforce.returnCode)
                                    {
                                        
                                        System.out.println("Inside Failed");
                                        System.out.println("setfiltFieldvalue:"+setfiltFieldvalue.size());
                                        listFailed.addAll(setfiltFieldvalue);
                                        System.out.println("Inside listFailed:"+listFailed);
                                    }
                                    setfiltFieldvalue.clear();

                                }

                            }
                            
                            writer.flush();
                            writer.close();
                                
                            System.out.println(iTotalNumberofRecordExported + "Number of Records Exported");
                            
                            return true;
                        }

                        @Override
                        protected void process(List<Integer> chunks) {
                            int number = chunks.get(chunks.size() - 1);
                            exportProgress.setValue(number);
                        }
                        @Override
                        protected void done()
                        {
                            System.out.println("listFailed:"+listFailed);
                            if(listFailed.size()<=1){
                            } else {
                                System.out.println("lnsideElse:");
                                try {
                                    listError = new ArrayList<String>();
                                    listError.add(SQueryFieldSelection.sQueryFieldName);
                                    writer = new FileWriter(fc.getSelectedFile() + "/Error_" + SObjectSelection.sObjectName + "_" + sTimeStamp + ".csv");
                                    CSVUtils.writeLine(writer, listError, '|');
                                    writer.flush();
                                    
                                    for(String errorRecord:listFailed)
                                    {
                                        listError = new ArrayList<String>();
                                        listError.add(errorRecord);
                                        CSVUtils.writeLine(writer, listError, ',');
                                    }
                                    
                                    writer.flush();
                                    writer.close();
                                } catch (IOException ex) {
                                    SQueryResultFields.this.lMessage.setText(ex.getMessage());
                                }
                            }
                            
                            SQueryFieldSelection.queryResultFields.setVisible(false);
                            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                            exportComplete = new FileExportComplete();
                            exportComplete.setLocation(dim.width / 2 - exportComplete.getSize().width / 2, dim.height / 2 - exportComplete.getSize().height / 2);
                            exportComplete.setTitle("File Export Complete");

                            exportComplete.setVisible(true);
                        }

                    }.execute();

                    
                    
                } catch (IOException ex) {
                    this.bNext.setEnabled(true);
                    this.lMessage.setText(ex.getMessage());
                }

            }
        } 

    }//GEN-LAST:event_bNextActionPerformed

    private void bFileBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFileBrowserActionPerformed
        // TODO add your handling code here:

        fc = new JFileChooser();
        if (sSelecteFilePath.isEmpty()) {
            fc.setCurrentDirectory(new java.io.File("."));
        } else {
            fc.setCurrentDirectory(new java.io.File(sSelecteFilePath));
        }

        fc.setDialogTitle("choosertitle");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            sSelecteFilePath = fc.getCurrentDirectory().toString();
            QuerySalesforce.csvFile = fc.getSelectedFile() + "/Export_" + SObjectSelection.sObjectName + "_" + sTimeStamp + ".csv";
            this.tFilePath.setText(QuerySalesforce.csvFile);
            this.bNext.setEnabled(true);
        } 
    }//GEN-LAST:event_bFileBrowserActionPerformed

    private void tQueryResultFieldsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tQueryResultFieldsMouseClicked
        // TODO add your handling code here:
        columPostn = tQueryResultFields.getSelectedColumn();
    }//GEN-LAST:event_tQueryResultFieldsMouseClicked

    private void tQueryResultFieldsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tQueryResultFieldsKeyReleased
        // TODO add your handling code here:
        
        
          /*  String sUserTypeChar = String.valueOf(evt.getKeyChar());
            model = (DefaultTableModel) tQueryResultFields.getModel();
            String sColumnValue = "";
            int selectedRow = -1;//before start
            int startRow = selectedRow;
            if (selectedRow == model.getRowCount() - 1) {
                startRow = -1;//Go before start
            }
            int newRowNo = salesforce_data_exporter.SearchJtable.searchJTab(tQueryResultFields,String.valueOf(evt.getKeyChar()),tQueryResultFields.getSelectedRow(),tQueryResultFields.getSelectedColumn());
        
            tQueryResultFields.setRowSelectionInterval(newRowNo, newRowNo);
            tQueryResultFields.scrollRectToVisible(new Rectangle(tQueryResultFields.getCellRect(newRowNo, newRowNo, true)));

            /*for (int row = startRow + 1; row < model.getRowCount(); row++) {
                sColumnValue = (String) model.getValueAt(row, columPostn);
                if (sColumnValue.startsWith(sUserTypeChar.toLowerCase()) || sColumnValue.startsWith(sUserTypeChar.toUpperCase())) {
                    tQueryResultFields.setRowSelectionInterval(row, row);
                    tQueryResultFields.scrollRectToVisible(new Rectangle(tQueryResultFields.getCellRect(row, row, true)));
                    return;
                }
            }*/
        
    }//GEN-LAST:event_tQueryResultFieldsKeyReleased

    private void tQueryResultFieldsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tQueryResultFieldsKeyPressed
        // TODO add your handling code here:
        String sUserTypeChar = String.valueOf(evt.getKeyChar());
            model = (DefaultTableModel) tQueryResultFields.getModel();
            String sColumnValue = "";
            int selectedRow = -1;//before start
            int startRow = selectedRow;
            if (selectedRow == model.getRowCount() - 1) {
                startRow = -1;//Go before start
            }
            int newRowNo = salesforce_data_exporter.SearchJtable.searchJTab(tQueryResultFields,String.valueOf(evt.getKeyChar()),tQueryResultFields.getSelectedRow(),tQueryResultFields.getSelectedColumn());
        
            tQueryResultFields.setRowSelectionInterval(newRowNo, newRowNo);
            tQueryResultFields.scrollRectToVisible(new Rectangle(tQueryResultFields.getCellRect(newRowNo, newRowNo, true)));

            /*for (int row = startRow + 1; row < model.getRowCount(); row++) {
                sColumnValue = (String) model.getValueAt(row, columPostn);
                if (sColumnValue.startsWith(sUserTypeChar.toLowerCase()) || sColumnValue.startsWith(sUserTypeChar.toUpperCase())) {
                    tQueryResultFields.setRowSelectionInterval(row, row);
                    tQueryResultFields.scrollRectToVisible(new Rectangle(tQueryResultFields.getCellRect(row, row, true)));
                    return;
                }
            }*/
    }//GEN-LAST:event_tQueryResultFieldsKeyPressed
    public void query() throws FileNotFoundException, IOException {
       try {
            int sSize;
            List<String> lstIds = new ArrayList<String>();
            //Suppose you have filled lstIds with your ids.
            String query = "SELECT ";

            String strIds = "";
            String sFieldName = "";
            for (int i = 0; i < listFieldSelected.size(); i++) {
                sFieldName = listFieldSelected.get(i);
                // System.out.println("sFieldName:"+sFieldName);
                if (i == 0) {
                    strIds = sFieldName;
                } else {
                    strIds += "," + sFieldName;
                }
            }
            query += strIds + " from " + SObjectSelection.sObjectName;

            //System.out.println("query:"+query);
            query += " where " + SQueryFieldSelection.sQueryFieldName + " in (";

            sSize = setfiltFieldvalue.size();

            Iterator<String> iterator = setfiltFieldvalue.iterator();
            String setVal = "";
            while (iterator.hasNext()) {
                setVal = iterator.next();
                if (iterator.hasNext()) {
                    query = query + "'" + setVal + "',";
                } else {
                    query = query + "'" + setVal + "'";
                }
            }

            //setfiltFieldvalue.clear();
            query = query + ") ";
            QuerySalesforce.sQuery = query;
            QuerySalesforce.sAccessToken = Main.sSessionId;
            QuerySalesforce.sInstanceURL = Main.sInstanceURL.substring(0, Main.sInstanceURL.indexOf("/services"));
            QuerySalesforce.QueryRecords(QuerySalesforce.sInstanceURL + "/services/data/v37.0/query");
            QueryResult result = new QueryResult();
            /*List<SObject> listSobject;
            listSobject = new ArrayList<SObject>(); */
        } catch (FileNotFoundException ex) {
            System.out.println("Exception in main : " + ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SQueryResultFields.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SQueryResultFields.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SQueryResultFields.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SQueryResultFields.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SQueryResultFields().setVisible(true);
            }
        });
    }

    public void loadtQueryResultFields() {

        model = (DefaultTableModel) tQueryResultFields.getModel();
        ArrayList<sObjectFields> list = LisSObjectFields();

        Object rowData[] = new Object[2];
        for (int i = 0; i < list.size(); i++) {
            rowData[0] = list.get(i).sFieldAPIName;
            rowData[1] = list.get(i).sFieldName;
            model.addRow(rowData);
        }

    }

    public class sObjectFields {

        public String sFieldName;
        public String sFieldAPIName;

        public sObjectFields(String OName, String APIName) {
            this.sFieldName = OName;
            this.sFieldAPIName = APIName;
        }
    }

    public ArrayList LisSObjectFields() {
        
        ArrayList<sObjectFields> list = new ArrayList<sObjectFields>();
        for (int i = 0; i < Main.listSObjectResultField.size(); i++) {
            sObjectFields sObInst = new sObjectFields(Main.mapSField.get(Main.listSObjectResultField.get(i)), Main.listSObjectResultField.get(i));
            list.add(sObInst);
        }
        return list;

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBack;
    private javax.swing.JButton bExit;
    private java.awt.Button bFileBrowser;
    private javax.swing.JButton bNext;
    private javax.swing.JProgressBar exportProgress;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label lFileDirectory;
    private javax.swing.JLabel lMessage;
    private javax.swing.JTextField tBatchSize;
    private javax.swing.JTextField tFilePath;
    private javax.swing.JTable tQueryResultFields;
    // End of variables declaration//GEN-END:variables
}
